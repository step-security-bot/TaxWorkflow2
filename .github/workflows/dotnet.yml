name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  changelog:
    runs-on: ubuntu-latest
    outputs:
      newTag: ${{ steps.changelog.outputs.tag }}
      
    steps:
      - uses: actions/checkout@v3

      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # skip-version-file: 'true'

      - name: create release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}

      - name: set output
        id: settingNewTagOutput
        run: |
          echo "newTag='${{ steps.changelog.outputs.tag }}'" >> $GITHUB_OUTPUT

  pack_nuget:
    runs-on: ubuntu-latest
    needs: changelog
    steps:
    - uses: actions/checkout@v3

    - run: "echo ${{ needs.changelog.outputs.newTag }}"

    - name: pack nuget package
      #run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }} -p:PackageVersion=${{ steps.tag_version.outputs.new_tag }}
      run: dotnet pack --configuration Release --output ${{ env.NuGetDirectory }} -p:PackageVersion=${{ needs.changelog.outputs.newTag }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg
      
  deploy:
    runs-on: ubuntu-latest
    needs: pack_nuget
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Create github-feed
        run: dotnet nuget add source --username AK2083 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/AK2083/index.json"
      - name: Publish NuGet package
        #run: |
        #  foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
        #      dotnet nuget push $file --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate
        #  }
        run: dotnet nuget push "${{ env.NuGetDirectory }}/*.nupkg" --api-key ${{ secrets.GITHUB_TOKEN }} --source "github" --skip-duplicate
